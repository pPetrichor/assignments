// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/07/2019 21:15:05"
                                                                                
// Verilog Test Bench template for design : lab01
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ns/ 1 ps
module lab01_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg a;
reg b;
reg s;
// wires                                               
wire y;

// assign statements (if any)                          
lab01 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.s(s),
	.y(y)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
   s=0; a=0; b=0; #10; // 将s，a和b 均初始 化 为 “0”， 维持10 个时间 单 位
	b=1; #10; // 将b改为 “1”，s和a的值不变 ， 继续保持 “0”，
	// 维持10 个 时间 单 位 即10*10ns=100ns
	a=1; b=0; #10; // 将a，b分别改为 “1” 和 “0”，s的值不变 ，
	// 继续保持 “0”， 维持10 个时 间 单位
	b=1; #10; // 将b改为 “1”，s和a的值不变 ， 维持10 个时间 单 位
	s=1; a=0; b=0; #10; // 将s，a，b分别变为 “1,0,0”， 维持10 个时间 单 位
	b=1; #10;
	a=1; b=0; #10;
	b=1; #10;                                                   
// --> end                                             
//$display("Running testbench");                       
end                                                    
//always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
//begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
//@eachvec;                                              
// --> end                                             
//end                                                    
endmodule

