|lab08_2
CLOCK_50 => CLOCK_50.IN3
LEDR[0] << higher:HIGH.port5
LEDR[1] << <GND>
LEDR[2] << <GND>
LEDR[3] << <GND>
LEDR[4] << <GND>
LEDR[5] << <GND>
LEDR[6] << <GND>
LEDR[7] << <GND>
LEDR[8] << <GND>
LEDR[9] << <GND>
HEX0[0] << trans:TRANS.port8
HEX0[1] << trans:TRANS.port8
HEX0[2] << trans:TRANS.port8
HEX0[3] << trans:TRANS.port8
HEX0[4] << trans:TRANS.port8
HEX0[5] << trans:TRANS.port8
HEX0[6] << trans:TRANS.port8
HEX1[0] << trans:TRANS.port9
HEX1[1] << trans:TRANS.port9
HEX1[2] << trans:TRANS.port9
HEX1[3] << trans:TRANS.port9
HEX1[4] << trans:TRANS.port9
HEX1[5] << trans:TRANS.port9
HEX1[6] << trans:TRANS.port9
HEX2[0] << trans:TRANS.port10
HEX2[1] << trans:TRANS.port10
HEX2[2] << trans:TRANS.port10
HEX2[3] << trans:TRANS.port10
HEX2[4] << trans:TRANS.port10
HEX2[5] << trans:TRANS.port10
HEX2[6] << trans:TRANS.port10
HEX3[0] << trans:TRANS.port11
HEX3[1] << trans:TRANS.port11
HEX3[2] << trans:TRANS.port11
HEX3[3] << trans:TRANS.port11
HEX3[4] << trans:TRANS.port11
HEX3[5] << trans:TRANS.port11
HEX3[6] << trans:TRANS.port11
HEX4[0] << trans:TRANS.port7
HEX4[1] << trans:TRANS.port7
HEX4[2] << trans:TRANS.port7
HEX4[3] << trans:TRANS.port7
HEX4[4] << trans:TRANS.port7
HEX4[5] << trans:TRANS.port7
HEX4[6] << trans:TRANS.port7
HEX5[0] << trans:TRANS.port6
HEX5[1] << trans:TRANS.port6
HEX5[2] << trans:TRANS.port6
HEX5[3] << trans:TRANS.port6
HEX5[4] << trans:TRANS.port6
HEX5[5] << trans:TRANS.port6
HEX5[6] << trans:TRANS.port6
PS2_CLK <> ps2_keyboard:PS_.port2
PS2_CLK2 <> <UNC>
PS2_DAT <> ps2_keyboard:PS_.port3
PS2_DAT2 <> <UNC>


|lab08_2|ps2_keyboard:PS_
clk => fifo.we_a.CLK
clk => fifo.waddr_a[2].CLK
clk => fifo.waddr_a[1].CLK
clk => fifo.waddr_a[0].CLK
clk => fifo.data_a[7].CLK
clk => fifo.data_a[6].CLK
clk => fifo.data_a[5].CLK
clk => fifo.data_a[4].CLK
clk => fifo.data_a[3].CLK
clk => fifo.data_a[2].CLK
clk => fifo.data_a[1].CLK
clk => fifo.data_a[0].CLK
clk => buffer[0].CLK
clk => buffer[1].CLK
clk => buffer[2].CLK
clk => buffer[3].CLK
clk => buffer[4].CLK
clk => buffer[5].CLK
clk => buffer[6].CLK
clk => buffer[7].CLK
clk => buffer[8].CLK
clk => buffer[9].CLK
clk => ready~reg0.CLK
clk => overflow~reg0.CLK
clk => r_ptr[0].CLK
clk => r_ptr[1].CLK
clk => r_ptr[2].CLK
clk => w_ptr[0].CLK
clk => w_ptr[1].CLK
clk => w_ptr[2].CLK
clk => count[0].CLK
clk => count[1].CLK
clk => count[2].CLK
clk => count[3].CLK
clk => ps2_clk_sync[0].CLK
clk => ps2_clk_sync[1].CLK
clk => ps2_clk_sync[2].CLK
clk => fifo.CLK0
clrn => count.OUTPUTSELECT
clrn => count.OUTPUTSELECT
clrn => count.OUTPUTSELECT
clrn => count.OUTPUTSELECT
clrn => w_ptr.OUTPUTSELECT
clrn => w_ptr.OUTPUTSELECT
clrn => w_ptr.OUTPUTSELECT
clrn => r_ptr.OUTPUTSELECT
clrn => r_ptr.OUTPUTSELECT
clrn => r_ptr.OUTPUTSELECT
clrn => overflow.OUTPUTSELECT
clrn => ready.OUTPUTSELECT
clrn => fifo.OUTPUTSELECT
clrn => buffer[0].ENA
clrn => buffer[1].ENA
clrn => buffer[2].ENA
clrn => buffer[3].ENA
clrn => buffer[4].ENA
clrn => buffer[5].ENA
clrn => buffer[6].ENA
clrn => buffer[7].ENA
clrn => buffer[8].ENA
clrn => buffer[9].ENA
ps2_clk => ps2_clk_sync[0].DATAIN
ps2_data => always1.IN1
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
data[0] <= fifo.DATAOUT
data[1] <= fifo.DATAOUT1
data[2] <= fifo.DATAOUT2
data[3] <= fifo.DATAOUT3
data[4] <= fifo.DATAOUT4
data[5] <= fifo.DATAOUT5
data[6] <= fifo.DATAOUT6
data[7] <= fifo.DATAOUT7
ready <= ready~reg0.DB_MAX_OUTPUT_PORT_TYPE
overflow <= overflow~reg0.DB_MAX_OUTPUT_PORT_TYPE


|lab08_2|higher:HIGH
clk_50 => PS_temp[0].CLK
clk_50 => PS_temp[1].CLK
clk_50 => PS_temp[2].CLK
clk_50 => PS_temp[3].CLK
clk_50 => PS_temp[4].CLK
clk_50 => PS_temp[5].CLK
clk_50 => PS_temp[6].CLK
clk_50 => PS_temp[7].CLK
clk_50 => if_caps~reg0.CLK
clk_50 => if_shift~reg0.CLK
clk_50 => together~reg0.CLK
clk_50 => counter[0]~reg0.CLK
clk_50 => counter[1]~reg0.CLK
clk_50 => counter[2]~reg0.CLK
clk_50 => counter[3]~reg0.CLK
clk_50 => counter[4]~reg0.CLK
clk_50 => counter[5]~reg0.CLK
clk_50 => counter[6]~reg0.CLK
clk_50 => counter[7]~reg0.CLK
clk_50 => counter[8]~reg0.CLK
clk_50 => counter[9]~reg0.CLK
clk_50 => off~reg0.CLK
clk_50 => state[0]~reg0.CLK
clk_50 => state[1]~reg0.CLK
clk_50 => state[2]~reg0.CLK
clk_50 => state[3]~reg0.CLK
clk_50 => not_f0.CLK
clk_50 => PS[0]~reg0.CLK
clk_50 => PS[1]~reg0.CLK
clk_50 => PS[2]~reg0.CLK
clk_50 => PS[3]~reg0.CLK
clk_50 => PS[4]~reg0.CLK
clk_50 => PS[5]~reg0.CLK
clk_50 => PS[6]~reg0.CLK
clk_50 => PS[7]~reg0.CLK
ready => PS.OUTPUTSELECT
ready => PS.OUTPUTSELECT
ready => PS.OUTPUTSELECT
ready => PS.OUTPUTSELECT
ready => PS.OUTPUTSELECT
ready => PS.OUTPUTSELECT
ready => PS.OUTPUTSELECT
ready => PS.OUTPUTSELECT
ready => not_f0.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => off.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => PS_temp.OUTPUTSELECT
ready => PS_temp.OUTPUTSELECT
ready => PS_temp.OUTPUTSELECT
ready => PS_temp.OUTPUTSELECT
ready => PS_temp.OUTPUTSELECT
ready => PS_temp.OUTPUTSELECT
ready => PS_temp.OUTPUTSELECT
ready => PS_temp.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => if_caps.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => off.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => together.OUTPUTSELECT
ready => if_shift.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => together.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => counter.OUTPUTSELECT
ready => together.OUTPUTSELECT
ready => off.OUTPUTSELECT
ready => if_shift.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => state.OUTPUTSELECT
ready => off.OUTPUTSELECT
data[0] => PS.DATAB
data[0] => Equal0.IN7
data[1] => PS.DATAB
data[1] => Equal0.IN6
data[2] => PS.DATAB
data[2] => Equal0.IN5
data[3] => PS.DATAB
data[3] => Equal0.IN4
data[4] => PS.DATAB
data[4] => Equal0.IN3
data[5] => PS.DATAB
data[5] => Equal0.IN2
data[6] => PS.DATAB
data[6] => Equal0.IN1
data[7] => PS.DATAB
data[7] => Equal0.IN0
PS[0] <= PS[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS[1] <= PS[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS[2] <= PS[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS[3] <= PS[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS[4] <= PS[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS[5] <= PS[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS[6] <= PS[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS[7] <= PS[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter[0] <= counter[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter[1] <= counter[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter[2] <= counter[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter[3] <= counter[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter[4] <= counter[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter[5] <= counter[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter[6] <= counter[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter[7] <= counter[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter[8] <= counter[8]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter[9] <= counter[9]~reg0.DB_MAX_OUTPUT_PORT_TYPE
together <= together~reg0.DB_MAX_OUTPUT_PORT_TYPE
if_caps <= if_caps~reg0.DB_MAX_OUTPUT_PORT_TYPE
if_shift <= if_shift~reg0.DB_MAX_OUTPUT_PORT_TYPE
off <= off~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[0] <= state[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[1] <= state[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[2] <= state[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[3] <= state[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|lab08_2|trans:TRANS
clk_50 => ASCII_l[0]~reg0.CLK
clk_50 => ASCII_l[1]~reg0.CLK
clk_50 => ASCII_l[2]~reg0.CLK
clk_50 => ASCII_l[3]~reg0.CLK
clk_50 => ASCII_l[4]~reg0.CLK
clk_50 => ASCII_l[5]~reg0.CLK
clk_50 => ASCII_l[6]~reg0.CLK
clk_50 => ASCII_h[0]~reg0.CLK
clk_50 => ASCII_h[1]~reg0.CLK
clk_50 => ASCII_h[2]~reg0.CLK
clk_50 => ASCII_h[3]~reg0.CLK
clk_50 => ASCII_h[4]~reg0.CLK
clk_50 => ASCII_h[5]~reg0.CLK
clk_50 => ASCII_h[6]~reg0.CLK
clk_50 => PS2_h[0]~reg0.CLK
clk_50 => PS2_h[1]~reg0.CLK
clk_50 => PS2_h[2]~reg0.CLK
clk_50 => PS2_h[3]~reg0.CLK
clk_50 => PS2_h[4]~reg0.CLK
clk_50 => PS2_h[5]~reg0.CLK
clk_50 => PS2_h[6]~reg0.CLK
clk_50 => PS2_l[0]~reg0.CLK
clk_50 => PS2_l[1]~reg0.CLK
clk_50 => PS2_l[2]~reg0.CLK
clk_50 => PS2_l[3]~reg0.CLK
clk_50 => PS2_l[4]~reg0.CLK
clk_50 => PS2_l[5]~reg0.CLK
clk_50 => PS2_l[6]~reg0.CLK
clk_50 => counter_h[0]~reg0.CLK
clk_50 => counter_h[1]~reg0.CLK
clk_50 => counter_h[2]~reg0.CLK
clk_50 => counter_h[3]~reg0.CLK
clk_50 => counter_h[4]~reg0.CLK
clk_50 => counter_h[5]~reg0.CLK
clk_50 => counter_h[6]~reg0.CLK
clk_50 => counter_l[0]~reg0.CLK
clk_50 => counter_l[1]~reg0.CLK
clk_50 => counter_l[2]~reg0.CLK
clk_50 => counter_l[3]~reg0.CLK
clk_50 => counter_l[4]~reg0.CLK
clk_50 => counter_l[5]~reg0.CLK
clk_50 => counter_l[6]~reg0.CLK
off => PS2_l.OUTPUTSELECT
off => PS2_l.OUTPUTSELECT
off => PS2_l.OUTPUTSELECT
off => PS2_l.OUTPUTSELECT
off => PS2_l.OUTPUTSELECT
off => PS2_l.OUTPUTSELECT
off => PS2_l.OUTPUTSELECT
off => PS2_h.OUTPUTSELECT
off => PS2_h.OUTPUTSELECT
off => PS2_h.OUTPUTSELECT
off => PS2_h.OUTPUTSELECT
off => PS2_h.OUTPUTSELECT
off => PS2_h.OUTPUTSELECT
off => PS2_h.OUTPUTSELECT
off => ASCII_h.OUTPUTSELECT
off => ASCII_h.OUTPUTSELECT
off => ASCII_h.OUTPUTSELECT
off => ASCII_h.OUTPUTSELECT
off => ASCII_h.OUTPUTSELECT
off => ASCII_h.OUTPUTSELECT
off => ASCII_h.OUTPUTSELECT
off => ASCII_l.OUTPUTSELECT
off => ASCII_l.OUTPUTSELECT
off => ASCII_l.OUTPUTSELECT
off => ASCII_l.OUTPUTSELECT
off => ASCII_l.OUTPUTSELECT
off => ASCII_l.OUTPUTSELECT
off => ASCII_l.OUTPUTSELECT
PS[0] => Decoder0.IN3
PS[0] => Decoder2.IN7
PS[1] => Decoder0.IN2
PS[1] => Decoder2.IN6
PS[2] => Decoder0.IN1
PS[2] => Decoder2.IN5
PS[3] => Decoder0.IN0
PS[3] => Decoder2.IN4
PS[4] => Decoder1.IN3
PS[4] => Decoder2.IN3
PS[5] => Decoder1.IN2
PS[5] => Decoder2.IN2
PS[6] => Decoder1.IN1
PS[6] => Decoder2.IN1
PS[7] => Decoder1.IN0
PS[7] => Decoder2.IN0
if_caps => always0.IN0
if_caps => always0.IN0
if_shift => always0.IN1
if_shift => Selector4.IN12
if_shift => Selector3.IN57
if_shift => Selector6.IN35
if_shift => Selector7.IN9
if_shift => Selector4.IN13
if_shift => Selector4.IN14
if_shift => Selector4.IN15
if_shift => Selector5.IN57
if_shift => Selector11.IN7
if_shift => Selector4.IN16
if_shift => Selector12.IN5
if_shift => Selector4.IN17
if_shift => Selector10.IN7
if_shift => Selector4.IN18
if_shift => Selector4.IN19
if_shift => Selector9.IN9
if_shift => Selector7.IN2
if_shift => Selector7.IN3
if_shift => Selector8.IN2
if_shift => Selector8.IN3
if_shift => Selector9.IN2
if_shift => Selector9.IN3
if_shift => Selector10.IN2
if_shift => Selector11.IN2
if_shift => always0.IN1
if_shift => Selector1.IN13
if_shift => Selector1.IN14
if_shift => Selector2.IN16
if_shift => Selector2.IN17
if_shift => Selector2.IN18
if_shift => Selector2.IN19
if_shift => Selector2.IN20
if_shift => Selector2.IN21
if_shift => Selector2.IN22
if_shift => Selector2.IN23
counter[0] => Mod0.IN13
counter[0] => Add0.IN20
counter[1] => Mod0.IN12
counter[1] => Add0.IN19
counter[2] => Mod0.IN11
counter[2] => Add0.IN18
counter[3] => Mod0.IN10
counter[3] => Add0.IN17
counter[4] => Mod0.IN9
counter[4] => Add0.IN16
counter[5] => Mod0.IN8
counter[5] => Add0.IN15
counter[6] => Mod0.IN7
counter[6] => Add0.IN14
counter[7] => Mod0.IN6
counter[7] => Add0.IN13
counter[8] => Mod0.IN5
counter[8] => Add0.IN12
counter[9] => Mod0.IN4
counter[9] => Add0.IN11
counter_h[0] <= counter_h[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_h[1] <= counter_h[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_h[2] <= counter_h[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_h[3] <= counter_h[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_h[4] <= counter_h[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_h[5] <= counter_h[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_h[6] <= counter_h[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_l[0] <= counter_l[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_l[1] <= counter_l[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_l[2] <= counter_l[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_l[3] <= counter_l[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_l[4] <= counter_l[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_l[5] <= counter_l[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
counter_l[6] <= counter_l[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_l[0] <= PS2_l[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_l[1] <= PS2_l[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_l[2] <= PS2_l[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_l[3] <= PS2_l[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_l[4] <= PS2_l[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_l[5] <= PS2_l[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_l[6] <= PS2_l[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_h[0] <= PS2_h[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_h[1] <= PS2_h[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_h[2] <= PS2_h[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_h[3] <= PS2_h[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_h[4] <= PS2_h[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_h[5] <= PS2_h[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
PS2_h[6] <= PS2_h[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_l[0] <= ASCII_l[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_l[1] <= ASCII_l[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_l[2] <= ASCII_l[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_l[3] <= ASCII_l[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_l[4] <= ASCII_l[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_l[5] <= ASCII_l[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_l[6] <= ASCII_l[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_h[0] <= ASCII_h[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_h[1] <= ASCII_h[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_h[2] <= ASCII_h[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_h[3] <= ASCII_h[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_h[4] <= ASCII_h[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_h[5] <= ASCII_h[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ASCII_h[6] <= ASCII_h[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE


