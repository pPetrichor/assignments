
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module exp12(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [9:0] h_addr;
wire [9:0] v_addr;
wire [23:0] vga_data;
assign VGA_SYNC_N = 1'b0;

wire reset = !KEY[0];
wire [7:0]data;
wire ready;
wire nextdata_n;
wire overflow;
wire [7:0]sc;
wire write;
wire keywren;	//键盘检测到A~Z输入，查询存储
wire [7:0]key_ascii;	//键盘ascii值

wire [11:0]y_data;//得到的vga_font值
wire [11:0]y_addr;//得到的vga_font下标

wire [2:0]coloraddr;//color下标
wire [23:0]colordata;//color值

wire [7:0]v_ascii;	//某一列的ASCII值
wire [5:0]vga_x; //扫描到的列坐标
wire pause;//暂停
wire [3:0]score_l;
wire [3:0]score_h;	//得分
wire [3:0]time_l;
wire [3:0]time_h;	//时间
wire bottom;	//到底部
wire [1:0] s_addr;
wire [8:0] s_data;//速度
wire [2:0]heart;

wire [7:0]ran_ascii;	//随机ASCII值（per0.5s）
wire [5:0]ran_x; 	//随机x坐标

wire [11:0]rq;
wire [12:0]raddr;
//=======================================================
//  Structural coding
//=======================================================

clkgen  #(25000000) c2c(CLOCK_50, reset, 1'b1, VGA_CLK);
vga_ctrl controller(VGA_CLK, reset, vga_data, h_addr, v_addr, VGA_HS, VGA_VS, VGA_BLANK_N, VGA_R, VGA_G, VGA_B);
vga_out outer(vga_x, colordata, VGA_BLANK_N, v_ascii, v_addr, h_addr, VGA_CLK, coloraddr, y_addr, y_data, vga_data
, bottom, score_h, score_l, pause, s_addr, s_data, time_h, time_l, heart, rq, raddr);//将ram_inside对应位置读到vga

ps2_keyboard PS2K(CLOCK_50, 1, PS2_CLK, PS2_DAT, data, ready, nextdata_n, overflow);
keyboard_scan	K2S(CLOCK_50, data, ready, nextdata_n, sc, write);
scan_HEX S2H(CLOCK_50, write, sc, key_ascii, keywren);

array_ctrl ac(CLOCK_50, bottom, vga_x, reset, keywren, key_ascii, ran_ascii, ran_x, v_ascii,
 pause, score_l, score_h, LEDR[9:0], heart);

colordata cd(coloraddr, CLOCK_50, colordata);
rom_ascii ra(y_addr, CLOCK_50, y_data);
speed sp(s_addr, CLOCK_50, s_data);
score scor(raddr, CLOCK_50, rq);

random rand(CLOCK_50, ran_x, ran_ascii, time_h, time_l, pause);

endmodule
